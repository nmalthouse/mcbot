const std = @import("std");
const strToEnum = std.meta.stringToEnum;
const FbsT = std.io.FixedBufferStream([]u8);
const JValue = std.json.Value;
const eql = std.mem.eql;
const Alloc = std.mem.Allocator;

fn getV(v: std.json.Value, comptime tag: std.meta.Tag(std.json.Value)) @TypeOf(@field(v, @tagName(tag))) {
    return getVal(v, tag) orelse unreachable;
}

fn getVal(v: std.json.Value, comptime tag: std.meta.Tag(std.json.Value)) ?@TypeOf(@field(v, @tagName(tag))) {
    if (v == tag) {
        return @field(v, @tagName(tag));
    }
    return null;
}

//var primitive_types =
pub fn main() !void {
    var gpa = std.heap.GeneralPurposeAllocator(.{}){};
    defer _ = gpa.detectLeaks();
    errdefer _ = gpa.detectLeaks();
    const alloc = gpa.allocator();
    var arena_allocs = std.heap.ArenaAllocator.init(alloc);
    defer arena_allocs.deinit();
    const arena_alloc = arena_allocs.allocator();
    //Protocol.json names their types differently, rather than change our codebase to use their names just map them for now.
    const em = "error.notImplemented";
    const types_map = [_]struct { []const u8, []const u8 }{
        .{ "Vector", "@import(\"vector.zig\")" },
        .{ "PSend", "mc.Packet" },
        .{ "varint", "i32" },
        .{ "vec3f64", "Vector.V3f" },
        .{ "UUID", "u128" },
        .{ "slot", "?mc.Slot" },
        .{ "string", "[]const u8" },
        .{ "position", "Vector.V3i" },
        .{ "restBuffer", "[]const u8" },
        .{ "nbt", "mc.nbt_zig.EntryWithName" },
        .{ "optionalNbt", em },
        .{ "command_node", em },
        .{ "packedChunkPos", em },
        .{ "tags", em },
        .{ "chunkBlockEntity", em },
        .{ "entityMetadata", em },
    };

    //
    var args = try std.process.argsWithAllocator(alloc);
    defer args.deinit();
    _ = args.next();
    const output_file_path = args.next() orelse fatal("Needs output file argument", .{});

    const mc_version_string = args.next() orelse fatal("Needs mc version string", .{});
    var data_dir_name = std.ArrayList(u8).init(arena_alloc);
    try data_dir_name.appendSlice("minecraft-data/data/pc/");
    try data_dir_name.appendSlice(mc_version_string);

    const mc_data_dir = try std.fs.cwd().openDir(data_dir_name.items, .{});
    const file = try mc_data_dir.openFile("protocol.json", .{});
    defer file.close();
    const json_str = try file.readToEndAlloc(alloc, std.math.maxInt(usize));
    defer alloc.free(json_str);
    var vtree = try std.json.parseFromSlice(std.json.Value, arena_alloc, json_str, .{});
    defer vtree.deinit();
    var root = getVal(vtree.value, .object) orelse return error.InvalidJson;

    var out = try std.fs.cwd().createFile(output_file_path, .{});
    defer out.close();
    const w = out.writer();
    try w.print("// THIS FILE IS AUTO GENERATED BY protocol_gen.zig\n", .{});
    try w.print("const mc = @import(\"listener.zig\");\n", .{});
    try w.print("const ParseItem = mc.AutoParse.ParseItem;\n", .{});
    try w.print("const Pt = mc.AutoParse.parseType;\n", .{});
    try w.print("pub const minecraftVersion = \"{s}\";\n", .{mc_version_string});
    for (types_map) |t| {
        try w.print("const {s} = {s};\n", .{ t[0], t[1] });
    }

    //try w.print("{s}", .{@embedFile("datatype.zig")});

    try emitPacketEnum(arena_alloc, &root, w, "play", "toClient", "Play_Clientbound");
    try emitPacketEnum(arena_alloc, &root, w, "play", "toServer", "Play_Serverbound");
    try emitPacketEnum(arena_alloc, &root, w, "handshaking", "toServer", "Handshake_Serverbound");
    try emitPacketEnum(arena_alloc, &root, w, "handshaking", "toClient", "Handshake_Clientbound");
    try emitPacketEnum(arena_alloc, &root, w, "login", "toClient", "Login_Clientbound");
    try emitPacketEnum(arena_alloc, &root, w, "login", "toServer", "Login_Serverbound");
    //try emitPacketEnum(&root, w, "configuration", "toClient", "Config_Clientbound");
    //try emitPacketEnum(&root, w, "configuration", "toServer", "Config_Serverbound");
}

pub fn emitPacketEnum(alloc: std.mem.Allocator, root: *std.json.ObjectMap, writer: anytype, game_state: []const u8, direction: []const u8, enum_name: []const u8) !void {
    const play = (getV(root.get(game_state) orelse unreachable, .object));
    const type_it = getV((getV(play.get(direction) orelse unreachable, .object)).get("types") orelse unreachable, .object);
    const map = getV(getV(getV(getV(getV(getV(type_it.get("packet") orelse unreachable, .array).items[1], .array).items[0], .object).get("type") orelse unreachable, .array).items[1], .object).get("mappings") orelse unreachable, .object);
    var mit = map.iterator();

    try writer.print("pub const {s} = enum(i32) {{\n", .{enum_name});
    while (mit.next()) |m| {
        try writer.print("{s} = {s},\n", .{ getV(m.value_ptr.*, .string), m.key_ptr.* });
    }
    const write_types = true;

    if (write_types) {
        str_w.reset();
        var parent = ParseStructGen.init(alloc);
        var p_it = type_it.iterator();
        while (p_it.next()) |p| {
            //const child = try parent.newDecl(p.key_ptr.*);
            newGenType(p.value_ptr.*, &parent, p.key_ptr.*, false, false) catch |err| {
                const last = parent.getLastDecl();
                last.unsupported = true;
                //parent.unsupported = true;
                std.debug.print("Omitting {s}:{s} {s} {any}\n", .{ game_state, direction, p.key_ptr.*, err });
                //try writer.print("pub const {s} = error.packetCannotBeAutoGenerated;\n", .{p.key_ptr.*});
                continue;
            };
            //try writer.print("pub const {s} = ", .{p.key_ptr.*});

            //try writer.print("{s}", .{fbs.getWritten()});
        }
        try writer.print("pub const packets = struct {{\n", .{});
        try parent.emit(
            writer,
            .{ .none = {} },
            if (std.mem.eql(u8, "toClient", direction)) .recv else .send,
        );
        try writer.print("}};\n", .{});
    }
    try writer.print("}};\n\n", .{});
}

const SupportedTypes = enum {
    container,
    array,
    option,
    buffer,
};

// Handling array type
// for struct just []const child
// for fn first len = parse(countType)
// while(parse(arraychild

var strbuf: [10000]u8 = undefined;
var str_w = std.io.FixedBufferStream([]u8){ .buffer = &strbuf, .pos = 0 };

pub fn printString(comptime fmt: []const u8, args: anytype) ![]const u8 {
    const start = str_w.pos;
    try str_w.writer().print(fmt, args);
    return str_w.buffer[start..str_w.pos];
}

pub const ParseStructGen = struct {
    const Self = @This();
    pub const PType = union(enum) {
        primitive: []const u8, // all primitive types have a mc.parse_primitiveName() function
        compound: *const Decl,

        pub fn getIdentifier(self: @This()) ![]const u8 {
            return switch (self) {
                .primitive => |p| p,
                .compound => |co| {
                    if (co.d == ._array) {
                        switch (co.d._array.emit_kind) {
                            .array_count => |count| return try printString("[{d}]{s}", .{ count, co.name }),
                            else => {},
                        }
                        return try printString("[]const {s}", .{co.name});
                    }
                    return co.name;
                },
            };
        }
    };

    pub const Field = struct {
        name: []const u8,
        type: PType,
        optional: bool = false,
        //type_identifier: []const u8,
    };

    pub const Decl = struct {
        unsupported: bool = false,
        name: []const u8,
        d: union(enum) {
            _struct: ParseStructGen,
            _array: struct {
                s: ParseStructGen,
                emit_kind: EmitKind = .{ .none = {} },
            },
            alias: []const u8,
            none: void,
        } = .none,
    };

    pub const EmitKind = union(enum) {
        none: void,
        array_varint: void,
        array_count: usize,
    };

    pub const EmitDir = enum {
        send,
        recv,
    };

    //unsupported: bool = false,
    fields: std.ArrayList(Field),
    decls: std.ArrayList(*Decl), //Pointer so we can store references to it
    alloc: std.mem.Allocator,

    pub fn init(alloc: std.mem.Allocator) @This() {
        return .{
            .fields = std.ArrayList(Field).init(alloc),
            .decls = std.ArrayList(*Decl).init(alloc),
            .alloc = alloc,
        };
    }

    pub fn getLastDecl(self: *Self) *Decl {
        return self.decls.items[self.decls.items.len - 1];
    }

    pub fn newDecl(self: *Self, name: []const u8) !*Decl {
        const new_decl = try self.alloc.create(Decl);
        new_decl.* = .{ .name = name };
        try self.decls.append(new_decl);
        return new_decl;
    }

    pub fn emit(self: *const Self, w: anytype, emit_kind: EmitKind, dir: EmitDir) !void {
        //,is:enum {packet, child}
        for (self.decls.items) |d| {
            if (d.unsupported) {
                //try w.print("pub const {s} = error.cannotBeAutoGenerated;\n", .{d.name});
                continue;
            }
            switch (d.d) {
                else => {},
                .alias => |a| {
                    try w.print("pub const {s} = {s};\n\n", .{ d.name, a });
                },
                ._array => |a| {
                    try w.print("pub const {s} = struct{{\n", .{d.name});
                    try a.s.emit(w, a.emit_kind, dir);
                    try w.print("}};\n\n", .{});
                },
                ._struct => |s| {
                    try w.print("pub const {s} = struct{{\n", .{d.name});
                    try s.emit(w, .{ .none = {} }, dir);
                    try w.print("}};\n\n", .{});
                },
            }
        }
        for (self.decls.items) |d| {
            if (d.unsupported) {
                try w.print("pub const {s} = error.cannotBeAutoGenerated;\n", .{d.name});
            }
        }
        for (self.fields.items) |f| {
            if (f.optional) {
                try w.print("{s}: ?{s} = null,\n", .{ f.name, try f.type.getIdentifier() });
            } else {
                try w.print("{s}: {s},\n", .{ f.name, try f.type.getIdentifier() });
            }
        }
        switch (dir) {
            .recv => {
                switch (emit_kind) {
                    .array_count, .array_varint => {
                        if (self.fields.items.len != 1) return error.invalidArrayStructure;
                        const item_field = self.fields.items[0];
                        try w.print("pub fn parse(pctx:anytype)![]@This(){{\n", .{});
                        if (emit_kind == .array_count) {
                            try w.print("const item_count:usize = {d};\n", .{emit_kind.array_count});
                        } else {
                            try w.print("const item_count:usize = @intCast(try pctx.parse_varint());\n", .{});
                        }
                        try w.print("const array = try pctx.alloc.alloc(@This(), item_count);\n", .{});
                        try w.print("for(0..item_count)|i|{{\n", .{});
                        //array[i].{s} = try {s}.parse(pctx);\n}}\n", .{ item_field.name, child_name });
                        switch (item_field.type) {
                            .primitive => |p| try w.print("array[i].{s} = try pctx.parse_{s}();\n", .{ item_field.name, p }),
                            .compound => |co| try w.print("array[i].{s} = try {s}.parse(pctx);\n", .{ item_field.name, co.name }),
                        }
                        try w.print("}}\n", .{});

                        try w.print("return array;\n", .{});
                        try w.print("}}\n", .{});
                    },
                    .none => {
                        try w.print("\npub fn parse(pctx:anytype)!@This() {{\n", .{});
                        try w.print("var ret: @This() = undefined;\n", .{});
                        var discard_pctx = true;
                        for (self.fields.items) |f| {
                            if (f.optional) {
                                try w.print("if(try pctx.parse_bool()){{\n", .{});
                            }
                            discard_pctx = false;
                            switch (f.type) {
                                .primitive => |p| try w.print("ret.{s} = try pctx.parse_{s}();\n", .{ f.name, p }),
                                .compound => |co| try w.print("ret.{s} = try {s}.parse(pctx);\n", .{ f.name, co.name }),
                            }
                            if (f.optional) {
                                try w.print("}}", .{});
                            }
                        }
                        if (discard_pctx)
                            try w.print("_ = pctx;\n", .{});
                        try w.print("return ret;\n", .{});
                        try w.print("}}\n\n", .{});
                    },
                }
            },
            .send => {
                try w.print("pub fn send(self:*const @This(), pk: *PSend)!void{{\n", .{});
                //if(is == .packet)
                //try w.print("try pk.clear();\n try pk.packetId()",.{})
                var discard_psend = true;
                for (self.fields.items) |f| {
                    discard_psend = false;
                    if (f.optional) {
                        try w.print("try pk.send_bool(self.{s} != null);\n", .{f.name});
                        try w.print("if(self.{s} != null){{\n", .{f.name});
                    }
                    const unwrapped_optional: []const u8 = if (f.optional) try printString("{s}.?", .{f.name}) else f.name;
                    switch (f.type) {
                        //TODO determine if the array we are sending is a primitive and then just use write()
                        .primitive => |p| try w.print("try pk.send_{s}(self.{s});\n", .{ p, unwrapped_optional }),
                        .compound => |co| {
                            if (co.d == ._array) {
                                if (co.d._array.emit_kind == .array_varint)
                                    try w.print("try pk.send_varint(@intCast(self.{s}.len));\n", .{unwrapped_optional});
                                try w.print("for(self.{s})|i_{s}|{{", .{ unwrapped_optional, f.name });
                                try w.print("try i_{s}.send(pk);\n", .{f.name});
                                try w.print("}}\n", .{});
                            } else {
                                try w.print("try self.{s}.send(pk);\n", .{unwrapped_optional});
                            }
                        },
                    }
                    if (f.optional)
                        try w.print("}}\n", .{});
                }
                if (discard_psend)
                    try w.print("_ = pk;\n_ = self;\n", .{});
                try w.print("}}\n", .{});
            },
        }
    }
};

pub fn newGenType(v: std.json.Value, parent: *ParseStructGen, fname: []const u8, gen_fields: bool, optional: bool) !void {
    switch (v) {
        .array => |a| { //An array is some compound type definition
            const t = strToEnum(SupportedTypes, getV(a.items[0], .string)) orelse return error.notSupported;
            switch (t) {
                //For each field in container
                //create field with (name: "Type_" ++ name)
                .container => {
                    const Tname = try printString("Type_{s}", .{fname});

                    const child = try parent.newDecl(Tname);
                    child.d = .{ ._struct = ParseStructGen.init(parent.alloc) };
                    const fields = getV(a.items[1], .array).items;
                    for (fields) |f| {
                        const ob = getV(f, .object);
                        const ident = getV(ob.get("name").?, .string);
                        const field_type = ob.get("type").?;
                        try newGenType(field_type, &child.d._struct, ident, true, false);
                        //    catch |err| {
                        //    std.debug.print("Omitting {s}:{s} {any}\n", .{ fname, ident, err });
                        //    child.d._struct.unsupported = true;
                        //    return;
                        //};
                    }
                    if (gen_fields)
                        try parent.fields.append(.{ .name = fname, .optional = optional, .type = .{ .compound = child } });
                },
                .buffer, .array => {
                    const array_def = getV(a.items[1], .object);

                    //buffer means its always u8
                    //maybe a count maybe a varint
                    const ekind: ParseStructGen.EmitKind = blk: {
                        const count_type_str = getV(array_def.get("countType") orelse {
                            const count = getV(array_def.get("count").?, .integer);
                            break :blk .{ .array_count = @intCast(count) };
                        }, .string);
                        const count_type = strToEnum(enum { varint }, count_type_str) orelse return error.invalidArrayCount;
                        _ = count_type;
                        break :blk .{ .array_varint = {} };
                    };

                    const child_type = if (t == .buffer) std.json.Value{ .string = "u8" } else array_def.get("type").?;
                    const Tname = try printString("Array_{s}", .{fname});
                    const child = try parent.newDecl(Tname);
                    child.d = .{ ._array = .{ .s = ParseStructGen.init(parent.alloc), .emit_kind = ekind } };
                    try newGenType(child_type, &child.d._array.s, try printString("i_{s}", .{fname}), true, false);
                    try parent.fields.append(.{ .name = fname, .optional = optional, .type = .{ .compound = child } });
                },
                .option => {
                    try newGenType(a.items[1], parent, fname, true, true);
                    // const Oname = try printString("Opt_{s}", .{fname});
                    // const child = try parent.newDecl(Oname);
                    // child.d = .{ ._struct = ParseStructGen.init(parent.alloc) };
                    // try newGenType(a.items[1], &child.d._struct, fname, true);
                    //try parent.fields.append(.{ .name = fname, .type = .{ .compound = child } });
                },
            }
        },
        .string => |str| { //A string is a literal type
            //return str;
            if (gen_fields) {
                try parent.fields.append(.{
                    .name = fname,
                    .optional = optional,
                    .type = .{ .primitive = str },
                });
            } else {
                const child = try parent.newDecl(try printString("Type_{s}", .{fname}));
                child.d = .{ .alias = str };
            }

            //return str;
            //try w.print("{s},\n", .{str});
            //try fw.print("try pctx.parse_{s}();\n", .{str});
        },
        else => return error.notSupported,
    }
}

pub fn fatal(comptime fmt: []const u8, args: anytype) noreturn {
    std.debug.print(fmt, args);
    std.process.exit(1);
}
